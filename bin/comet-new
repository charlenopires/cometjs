#! /usr/bin/env node

var commands = require('commander').parse(process.argv),
    colors = require('colors'),
    fs = require('fs'),
    promise = require('bluebird').Promise,
    mkdirp = require('mkdirp'),
    rimraf = require('rimraf'),
    replace = require('replace');

var args = commands.args;

if (!args.length) {
  console.log('must give a name after command ' + 'new'.red + ' (ex: comet new myname)'.green);
  process.exit(1);
}

if (args.length > 2) {
  console.log('sorry, we don\'t support multiple names'.green);
  process.exit(1);
}

// allow custom repos
var repo = 'cometjs';
var repoName = 'starter';

if (args.length === 2) {
  var repoArg = args[1];
  if (repoArg.indexOf('/') !== -1) {
    repo = repoArg.split('/')[0];
    repoName = repoArg.split('/')[1];
  }
  else {
    repoName = repoArg;
  }
}

var name = args[0];

console.log();
console.log('Creating new meteor folder for: %s...'.green, name);

var dest = process.cwd() + '/' + name;

if (fs.existsSync(dest))
  console.log('Error! This directory already exists'.green);
else
  start();

function start() {
  makeFolder()
    .then(cloneRepo)
    .then(deleteGitFolder)
    .then(initGit)
    .then(finish)
    .catch(function(err) {
      console.log("\n", 'Error'.bold.red);
      console.log(err);
    });
}

function makeFolder() {
  return new Promise(function(resolve, reject) {
    mkdirp(dest, function(err) {
      if (err)
        reject(err);
      else
        resolve();
    });
  });
}

function getRepo() {
  return 'https://github.com/'+repo+'/cometjs-'+repoName;
}

function cloneRepo() {
  return promiseProcess(
    'git clone --depth=1 '+getRepo()+' '+ dest
  );
}

function deleteGitFolder() {
  return new Promise(function(resolve, reject) {
    rimraf(dest + '/.git', function(err, data) {
      if (err) return reject(err);
      resolve(data);
    })
  });
}

function initGit() {
  return promiseProcess('git init');
}

function promiseProcess(cmd) {
  return new Promise(function(resolve, reject) {
    console.log('Running '+cmd+'...'.green);
    process.chdir(dest);

    var exec = require('child_process').exec, child;
    child = exec(cmd, handleChildProcess.bind(this, resolve, reject));
  });
}

function handleChildProcess(resolve, reject, error, stdout, stderr) {
  if (error)
    return reject(error);

  resolve();
}

function finish() {
  console.log('Done!'.bold.red);
  console.log();
}
